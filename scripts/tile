#!/bin/bash

##
# Generate a tiled scale pyramid of an image and a little overview thumbnail.
# Call it this way:
#
# tile <image file name> <tile size> <thumbnail size> <slice_dir_name>
#
# e.g.
# tile image.tif 256 192
##

image_name=${1}
tile_size=${2}
thumbnail_size=${3}
slice_dir_name=${4}

if [[ -z ${slice_dir_name} ]]
then
	${slice_dir_name} = "."
fi

convert +compress ${image_name} s_0.ppm

width=`identify -format "%w" s_0.ppm`
height=`identify -format "%h" s_0.ppm`

initial_s=0
s=${initial_s}

width=$((${width}/(2**${s})))
height=$((${height}/(2**${s})))

while [ $height -ge $((2*${tile_size})) ];
do
	cols=$((${width}/${tile_size}))
	if [[ $width > $(($cols*${tile_size})) ]]
	then
		cols=$(($cols+1))
	fi
	rows=$((${height}/${tile_size}))
	if [[ $height > $(($rows*${tile_size})) ]]
	then
		rows=$(($rows+1))
	fi

	echo "${width} => ${cols}" >&2
	echo "${height} => ${rows}" >&2

	if [[ ${s} -ne ${initial_s} ]]
	then
		convert -resize ${width}x${height} s_$((${s}-1)).ppm s_${s}.ppm
	fi

	convert -crop ${tile_size}x${tile_size} s_${s}.ppm ${s}.jpg
	for file in `ls ${s}-*.jpg`;
	do
		regex="s/${s}-\([0-9][0-9]*\).jpg/\1/"
		n=`echo ${file} | sed "${regex}"`
		r=$((${n}/${cols}))
		c=$((${n}%${cols}))
		mkdir -p ${slice_dir_name}/${s}/${r}
		mv $file ${slice_dir_name}/${s}/${r}/${c}.jpg
	done

	s=$(($s+1))
	width=$((${width}/2))
	height=$((${height}/2))	
done

if [[ $height < $width ]]
then
	convert -resize ${thumbnail_size} s_$((${s}-2)).ppm ${slice_dir_name}/small.jpg
else
	convert -resize x${thumbnail_size} s_$((${s}-2)).ppm ${slice_dir_name}/small.jpg
fi

rm *.ppm

